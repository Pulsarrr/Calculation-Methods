clc
clear variables
close all force

%_______________________Initialisation___________________%
omega=4;%Hz
W = 2*pi*omega;
a = 0.7;
b = 1.5;
eps = 1e-6;
n = [10; 100; 1000]';
N = zeros(3, 7);
x1 = (a : (b-a)/n(1) : b); 
x2 = (a : (b-a)/n(2) : b);
x3 = (a : (b-a)/n(3) : b);
%========================================================%


%____________________Functions calling___________________%
[f1] = hw_int_func(x1);
[f2] = hw_int_func(x2);
[f3] = hw_int_func(x3);


S = zeros(3, 7);
S(1, 1) = hw_int_analog(@hw_int_func, a, b, n(1), 'Left rectangle method');
S(2, 1) = hw_int_analog(@hw_int_func, a, b, n(2), 'Left rectangle method');
S(3, 1) = hw_int_analog(@hw_int_func, a, b, n(3), 'Left rectangle method');

S(1, 2) = hw_int_analog(@hw_int_func, a, b, n(1), 'Right rectangle method');
S(2, 2) = hw_int_analog(@hw_int_func, a, b, n(2), 'Right rectangle method');
S(3, 2) = hw_int_analog(@hw_int_func, a, b, n(3), 'Right rectangle method');

S(1, 3) = hw_int_analog(@hw_int_func, a, b, n(1), 'Central rectangle method');
S(2, 3) = hw_int_analog(@hw_int_func, a, b, n(2), 'Central rectangle method');
S(3, 3) = hw_int_analog(@hw_int_func, a, b, n(3), 'Central rectangle method');

S(1, 4) = hw_int_analog(@hw_int_func, a, b, n(1), 'Trapezoid method');
S(2, 4) = hw_int_analog(@hw_int_func, a, b, n(2), 'Trapezoid method');
S(3, 4) = hw_int_analog(@hw_int_func, a, b, n(3), 'Trapezoid method');

S(1, 5) = hw_int_analog(@hw_int_func, a, b, n(1), 'Parabola method');
S(2, 5) = hw_int_analog(@hw_int_func, a, b, n(2), 'Parabola method');
S(3, 5) = hw_int_analog(@hw_int_func, a, b, n(3), 'Parabola method');

S(1, 6) = hw_int_analog(@hw_int_func, a, b, n(1), 'Gauss-Legandre quadrature method');
S(2, 6) = hw_int_analog(@hw_int_func, a, b, n(2), 'Gauss-Legandre quadrature method');
S(3, 6) = hw_int_analog(@hw_int_func, a, b, n(3), 'Gauss-Legandre quadrature method');

S(1, 7) = hw_int_analog(@hw_int_func, a, b, n(1), 'Gauss-Kronrod quadrature method');
S(2, 7) = hw_int_analog(@hw_int_func, a, b, n(2), 'Gauss-Kronrod quadrature method');
S(3, 7) = hw_int_analog(@hw_int_func, a, b, n(3), 'Gauss-Kronrod quadrature method')


fprintf("Left rectangle  method for N=10\n");
[I] = hw_int_analog(@hw_int_func, a, b, n(1), 'Left rectangle method');
fprintf("Left rectangle method for N=100\n");
[I] = hw_int_analog(@hw_int_func, a, b, n(2), 'Left rectangle method');
fprintf("Left rectangle method for N=1000\n");
[I] = hw_int_analog(@hw_int_func, a, b, n(3), 'Left rectangle method');
fprintf("\n\n\n\n");

fprintf("Right rectangle method for N=10\n");
[I] = hw_int_analog(@hw_int_func, a, b, n(1), 'Right rectangle method');
fprintf("Right rectangle method for N=100\n");
[I] = hw_int_analog(@hw_int_func, a, b, n(2), 'Right rectangle method');
fprintf("Right rectangle method for N=1000\n");
[I] = hw_int_analog(@hw_int_func, a, b, n(3), 'Right rectangle method');
fprintf("\n\n\n\n");

fprintf("Central rectangle method for N=10\n");
[I] = hw_int_analog(@hw_int_func, a, b, n(1), 'Central rectangle method');
fprintf("Central rectangle method for N=100\n");
[I] = hw_int_analog(@hw_int_func, a, b, n(2), 'Central rectangle method');
fprintf("Central rectangle method for N=1000\n");
[I] = hw_int_analog(@hw_int_func, a, b, n(3), 'Central rectangle method');
fprintf("\n\n\n\n");

fprintf("Trapezoid method for N=10\n");
[I] = hw_int_analog(@hw_int_func, a, b, n(1), 'Trapezoid method');
fprintf("Trapezoid method for N=100\n");
[I] = hw_int_analog(@hw_int_func, a, b, n(2), 'Trapezoid method');
fprintf("Trapezoid method for N=1000\n");
[I] = hw_int_analog(@hw_int_func, a, b, n(3), 'Trapezoid method');
fprintf("\n\n\n\n");

fprintf("Parabola method for N=10\n");
[I] = hw_int_analog(@hw_int_func, a, b, n(1), 'Parabola method');
fprintf("Trapezoid method for N=100\n");
[I] = hw_int_analog(@hw_int_func, a, b, n(2), 'Parabola method');
fprintf("Trapezoid method for N=1000\n");
[I] = hw_int_analog(@hw_int_func, a, b, n(3), 'Parabola method');
fprintf("\n\n\n\n");

fprintf("Gauss-Legandre quadrature method for N=10\n");
[I] = hw_int_analog(@hw_int_func, a, b, n(1), 'Gauss-Legandre quadrature method');
fprintf("Gauss-Legandre quadrature method for N=100\n");
[I] = hw_int_analog(@hw_int_func, a, b, n(2), 'Gauss-Legandre quadrature method');
fprintf("Gauss-Legandre quadrature method for N=1000\n");
[I] = hw_int_analog(@hw_int_func, a, b, n(3), 'Gauss-Legandre quadrature method');
fprintf("\n\n\n\n");

fprintf("Gauss-Kronrod quadrature method for N=10\n");
[I] = hw_int_analog(@hw_int_func, a, b, n(3), 'Gauss-Kronrod quadrature method');
fprintf("Gauss-Kronrod quadrature method for N=100\n");
[I] = hw_int_analog(@hw_int_func, a, b, n(3), 'Gauss-Kronrod quadrature method');
fprintf("Gauss-Kronrod quadrature method for N=1000\n");
[I] = hw_int_analog(@hw_int_func, a, b, n(3), 'Gauss-Kronrod quadrature method');


%========================================================%


%________________________Functions_______________________%
function[f] = hw_int_func(x)
    omega=4;%Hz
    W=2*pi*omega;
    f = 1.16*x + 0.13*sin(W*x) - 0.89.*x.*x;
end


function[I] = hw_int_analog(fnc, a, b, n, k)
I = 0;
x = (a : (b-a)/n : b); 
shift = 1;
switch k
    case 'Left rectangle method'
        for i = (0+shift:1:n-1+shift)
            I = I + fnc(x(i))*(x(i+1) - x(i));
        end 
    case 'Right rectangle method'        
        for i = (1+shift:1:n+shift)
            I = I + fnc(x(i))*(x(i) - x(i-1));
        end 
    case 'Central rectangle method'
        for i = (1+shift:1:n+shift)
            I = I + fnc((x(i-1) + x(i))/2)*(x(i) - x(i-1));
        end
    case 'Trapezoid method'
        for i = (0+shift:1:n-1+shift)
           I = I + (fnc(x(i)) + fnc(x(i+1)))*(x(i+1)-x(i))/2;  
        end
    case 'Parabola method'
        sum1 = 0;
        sum2 = 0;
        N = 2*n;
        h = (b-a)/N;
        x = (a:h:b);
        for i = (1:1:n-1)
            sum1 = sum1 + fnc(x(2*i + shift));
        end
        for i = (1:1:n)
            sum2 = sum2 + fnc(x(2*i - 1 + shift));
        end
        I = I + (h/3)*(fnc(x(0+shift)) + fnc(x(N)) + 2*sum1 + 4*sum2);
    case 'Gauss-Legandre quadrature method'
        I = 0;
        y(1) = -0.90618;
        y(2) = -0.538469;
        y(3) = 0;
        y(4) = 0.538469;
        y(5) = 0.90618;
        w(1) = 0.236927;
        w(2) = 0.478629;
        w(3) = 0.568889;
        w(4) = 0.478629;        
        w(5) = 0.236927;
        for k = (0:1:n-1)
            sum = 0;
            for j = (1:1:5)
                sum = sum + w(j)*fnc((x(k+1+shift)-x(k+shift))*y(j)/2 +....
                    (x(k+shift)+x(k+1+shift))/2);
            end
            I = I + ((x(k+1+shift)-x(k+shift))/2)*sum;
        end
    case 'Gauss-Kronrod quadrature method'
%         N = 2*n+1;
%         h = ((b-a)/N);
%         x = (a:h:b);
        I = 0;
        y = [-0.991455371120813, -0.949107912342759, -0.864864423359769, -0.741531185599394, -0.586087235467691, -0.405845151377397, -0.207784955007898, 0, 0.207784955007898, 0.405845151377397, 0.586087235467691, 0.741531185599394, 0.864864423359769, 0.949107912342759, 0.991455371120813];
        w = [0.022935322010529, 0.063092092629979, 0.104790010322250, 0.140653259715525, 0.169004726639267, 0.190350578064785, 0.204432940075298, 0.209482141084728, 0.204432940075298, 0.190350578064785, 0.169004726639267, 0.140653259715525, 0.104790010322250, 0.063092092629979, 0.022935322010529];
        for k = (0:1:n-1)
            sum = 0;
            for j = (1:1:15)
                sum = sum + w(j)*fnc((x(k+1+shift)-x(k+shift))*y(j)/2 +....
                    (x(k+shift)+x(k+1+shift))/2);
            end
            I = I + ((x(k+1+shift)-x(k+shift))/2)*sum;
        end
    end
end
%========================================================%
